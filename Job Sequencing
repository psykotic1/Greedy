struct Job 
{ 
    int id;	 // Job Id 
    int dead; // Deadline of job 
    int profit; // Profit if job is over before or on deadline 
};
*/
static bool cmp(struct Job &a, struct Job &b){
    int x=a.profit;
    int y=b.profit;
    if(x==y) return a.dead<b.dead;
    return x>y;
    
}
class Solution {
    public:
    vector<int> JobScheduling(Job arr[], int n){
        vector<int> temp(n,0);
        sort(arr,arr+n,cmp);
        int cnt=0;
        int ans=0;
        for(int i=0;i<n;i++){
            int j=arr[i].dead-1;
            if(temp[j]==0){
                ans+=arr[i].profit;
                temp[j]=1;
            }
            else{
                while(j>=0){
                    if(temp[j]!=1){
                        temp[j]=1;
                        ans+=arr[i].profit;
                        break;
                    }
                    j--;
                }
            }
        }
        for(int i=0;i<n;i++) if(temp[i]==1) cnt++;
        return {cnt,ans};
    } 
};
